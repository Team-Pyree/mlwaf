# [og_code]
# nginx.vh.default.conf -- docker-openresty
#
# 이 파일은 다음 위치에 설치됩니다:
#   `/etc/nginx/conf.d/default.conf`
#
# 이 파일은 Upstream OpenResty의 `nginx.conf`의 `server` 섹션을 추적합니다.
#
# 이 구성 파일 (그리고 `etc/nginx/conf.d/`에있는 다른 구성 파일)은 기본적으로 `/usr/local/openresty/nginx/conf/nginx.conf`의 `include` 지시문에 의해로드됩니다.
#
# 자세한 내용은 https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files을 참조하십시오.

# nginx.vh.default.conf -- docker-openresty

# Lua 모듈 및 전역 변수를 서버 블록에서 사용하기 위해 초기화합니다.
init_by_lua_block {
    http = require "resty.http"
    cjson = require("cjson")
    aws_auth = require "resty.aws_auth"
    mysql = require "resty.insert"
}

# 서버 블록을 정의합니다.
server {
    listen 80;
    server_name localhost;

    access_log /var/log/nginx/host.access.log main;
    error_log /var/log/nginx/error.log debug;

    set_by_lua $host_web 'return os.getenv("HOST_WEB")';
    resolver 127.0.0.11 valid=10s;

    location / {
        access_by_lua_block {
            ngx.req.read_body()
            local unquote = ngx.unescape_uri
            local remote_addr = ngx.var.remote_addr or ""
            local time_local = ngx.var.time_local or ""
            local request_method = ngx.var.request_method or ""
            local server_protocol = ngx.var.server_protocol or ""
            local http_referer = ngx.var.http_referer or ""
            local sent_http_set_cookie = ngx.var.sent_http_set_cookie or ""
            local request_body = unquote(ngx.var.request_body or "")
            local data = unquote(ngx.req.get_body_data() or "null")
            local cookies = unquote(ngx.var.http_cookie or "null")
            local url = unquote(ngx.var.request_uri or "null")
            local user_agent = unquote(ngx.var.http_user_agent or "null")
            local body = { url, user_agent, cookies, data }
            setmetatable(body, cjson.array_mt)

            ngx.log(ngx.NOTICE, "Request Body:", cjson.encode(body))

            local db, err = mysql.connect()
            if not db then
                ngx.log(ngx.ERR, "Error connecting to MySQL: ", err)
                return ngx.exit(501)
            end

            local config = {
                aws_host = os.getenv("AWS_HOST"),
                aws_key = os.getenv("AWS_KEY"),
                aws_secret = os.getenv("AWS_SECRET"),
                aws_region = os.getenv("AWS_REGION"),
                aws_service = os.getenv("AWS_SERVIC"),
                content_type = os.getenv("CONTENT_TYPE"),
                request_method = os.getenv("REQUEST_METHOD"),
                request_path = os.getenv("REQUEST_PATH"),
                request_body= cjson.encode(body)
            }

            local aws = aws_auth:new(config)
            local auth = aws:get_authorization_header()
            local amz_date = aws:get_date_header()

            local endpoint_url = "https://" .. config.aws_host .. config.request_path
            local httpc = http.new()
            httpc:set_timeout(5000)

            local res, err = httpc:request_uri(endpoint_url, {
                method = config.request_method,
                body = config.request_body,
                headers = {
                    ["Content-Type"] = config.content_type,
                    ["Authorization"] = auth,
                    ["X-Amz-Date"] = amz_date,
                },
                ssl_verify = false
            })

            if not res then
                ngx.log(ngx.ERR, "Error Endpoint Request: ", err)
                return ngx.exit(501)
            end

            if res.status ~= 200 then
                ngx.status = res.status
                ngx.log(ngx.NOTICE, "ML API call error:", res.reason)
                ngx.say("오류: " .. res.reason)
                return
            end

            ngx.log(ngx.NOTICE, "ML API call success. continue to upstream")

            local response_body = cjson.decode(res.body)
            ngx.log(ngx.NOTICE, "Decoded Response Body:", cjson.encode(response_body))

            local filtered_array = {unpack(response_body)}
            for i = #filtered_array, 1, -1 do
                if filtered_array[i] == "valid" then
                    table.remove(filtered_array, i)
                end
            end

            local ml_prediction = table.concat(filtered_array, ",")

            if #(filtered_array) == 0 then
                ngx.log(ngx.NOTICE, "This is a normal request")
            else
                local success, err_msg = mysql.insert(db, remote_addr, time_local, request_method, server_protocol, http_referer, url, user_agent, request_body, cookies, sent_http_set_cookie, ml_prediction)
                if not success then
                    ngx.log(ngx.ERR, "Error inserting into MySQL: ", err_msg)
                    -- return ngx.exit(502)
                end
                ngx.log(ngx.WARN, "This is an attack request")
                ngx.exit(403)
            end

        }

        proxy_pass http://$host_web;
        
        proxy_set_header Host $host_web;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    error_page 403 500 502 503 504 /request_blocked.html;
    location = /request_blocked.html {
        root  /usr/local/openresty/nginx/html; 
    }

}
