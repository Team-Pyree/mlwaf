version: '3'
services:
  waf:
    image: openresty/openresty:1.21.4.1-0-jammy
    volumes:
      - ${PWD}/waf/conf.d:/etc/nginx/conf.d
      - ${PWD}/waf/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
      - ${PWD}/waf/logs:/var/log/nginx/
      - ${PWD}/lualib/http.lua:/usr/local/openresty/lualib/resty/http.lua:ro
      - ${PWD}/lualib/http_connect.lua:/usr/local/openresty/lualib/resty/http_connect.lua:ro
      - ${PWD}/lualib/http_headers.lua:/usr/local/openresty/lualib/resty/http_headers.lua:ro
      - ${PWD}/lualib/mysql.lua:/usr/local/openresty/lualib/resty/mysql.lua:ro
      - ${PWD}/lualib/rsa.lua:/usr/local/openresty/lualib/resty/rsa.lua:ro
      - ${PWD}/lualib/insert.lua:/usr/local/openresty/lualib/resty/insert.lua:ro
      - ${PWD}/lualib/aws_auth.lua:/usr/local/openresty/lualib/resty/aws_auth.lua:ro
      - ${PWD}/lualib/hmac.lua:/usr/local/openresty/lualib/resty/hmac.lua:ro
      - ${PWD}/lualib/sha.lua:/usr/local/openresty/lualib/resty/sha.lua:ro
      - ${PWD}/lualib/sha256.lua:/usr/local/openresty/lualib/resty/sha256.lua:ro
      - ${PWD}/lualib/string.lua:/usr/local/openresty/lualib/resty/string.lua:ro
    ports:
      - "9090:80"
    environment:
      - HOST_ML=ml
      - HOST_WEB=web

  ml:
    image: openresty/openresty:1.21.4.1-0-jammy
    volumes:
      - ${PWD}/ml/conf.d:/etc/nginx/conf.d
      - ${PWD}/ml/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
      - ${PWD}/ml/logs:/var/log/nginx/
      - ${PWD}/lualib/http.lua:/usr/local/openresty/lualib/resty/http.lua:ro
      - ${PWD}/lualib/http_connect.lua:/usr/local/openresty/lualib/resty/http_connect.lua:ro
      - ${PWD}/lualib/http_headers.lua:/usr/local/openresty/lualib/resty/http_headers.lua:ro
    ports:
      - 9091:80

  # dashboard:
  #   build: 
  #     context: .
  #     dockerfile: ${PWD}/dashboard/Dockerfile  # 별도의 Dockerfile을 지정
  #   ports:
  #     - "9093:80"
  #   volumes:
  #     - ${PWD}/dashboard/env:/usr/src/app/dashboard/env
  #     - ${PWD}/dashboard/templates:/usr/src/app/dashboard/templates
  #     - ${PWD}/dashboard/app.py:/usr/src/app/dashboard/app.py
  #   environment:
  #     - DB_HOST=mysql
  #     - DB_USER=root
  #     - DB_PASSWORD=1111
  #     - DB_DATABASE=logs
  #   depends_on:
  #     - mysql 

  dashboard:
    build:
      context: .
      dockerfile: ./dashboard/Dockerfile
    ports:
      - "9093:9093"
    volumes:
      - ${PWD}/dashboard/env:/usr/src/app/dashboard/env
      - ${PWD}/dashboard/templates:/usr/src/app/dashboard/templates
      - ${PWD}/dashboard/app.py:/usr/src/app/dashboard/app.py
      - ${PWD}/dashboard/static:/usr/src/app/dashboard/static
    environment:
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=1111
      - DB_DATABASE=logs
    depends_on:
      - mysql

  web:
    container_name: django
    build: 
      context: .
      dockerfile: ${PWD}/djangoweb/Dockerfile
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:80"
    volumes: 
      - ${PWD}/djangoweb/env:/usr/src/app/djangoweb/env
      - ${PWD}/djangoweb/puddle:/usr/src/app/djangoweb/puddle
      - ${PWD}/djangoweb/.vscode:/usr/src/app/djangoweb/.vscode
    ports:
      - "9092:80"

# 멘토님 수정 코드
  mysql:
    image: mysql:latest
    # hostname: mysql
    volumes:
      - ${PWD}/data:/var/lib/mysql
      - ${PWD}/security_logs.sql:/docker-entrypoint-initdb.d/security_logs.sql
    environment:
      - MYSQL_ROOT_PASSWORD=1111
    ports:
      - 3305:3306
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10