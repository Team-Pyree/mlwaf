# [og_code]
# nginx.vh.default.conf -- docker-openresty
#
# 이 파일은 다음 위치에 설치됩니다:
#   `/etc/nginx/conf.d/default.conf`
#
# 이 파일은 Upstream OpenResty의 `nginx.conf`의 `server` 섹션을 추적합니다.
#
# 이 구성 파일 (그리고 `etc/nginx/conf.d/`에있는 다른 구성 파일)은 기본적으로 `/usr/local/openresty/nginx/conf/nginx.conf`의 `include` 지시문에 의해로드됩니다.
#
# 자세한 내용은 https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files을 참조하십시오.

# Lua 모듈 및 전역 변수를 서버 블록에서 사용하기 위해 초기화합니다.
init_by_lua_block {
    http = require "resty.http"
    cjson = require("cjson")
    aws_auth = require "resty.aws_auth"
    mysql = require "resty.insert"
}

# 서버 블록을 정의합니다.
server {
    listen       80;              # HTTP 요청을 수신하기 위해 포트 80에서 대기합니다.
    server_name  localhost;       # 'localhost'를 서버 이름으로 사용하는 요청을 수신합니다.

    # 문자 집합 설정 (주석 처리됨):
    #charset koi8-r;

    access_log  /var/log/nginx/host.access.log main;  # 접근 요청을 기록합니다.
    error_log   /var/log/nginx/error.log debug;        # 디버그 정보가 포함된 오류를 기록합니다.

    # Lua 변수를 정의하고 DNS 해결을 위한 리졸버를 설정합니다.
    set_by_lua $host_web 'return os.getenv("HOST_WEB")';  # 'HOST_WEB' 환경 변수의 값을 'host_web' Lua 변수로 설정합니다.
    resolver 127.0.0.11 valid=10s;  # 로컬 DNS 서버를 사용하고 10초 동안 유효한 리졸버를 설정합니다.

    # 요청 처리를 위한 Lua 코드를 포함하는 위치 블록을 정의합니다.
    location / {
        access_by_lua_block {  -- 접근 제어 및 요청 처리를 위한 Lua 코드를 실행합니다.
            ngx.req.read_body()             -- 요청 본문 읽어옵니다.

            local remote_addr = ngx.var.remote_addr or ""
            local time_local = ngx.var.time_local or ""
            local request_method = ngx.var.request_method or ""
            local server_protocol = ngx.var.server_protocol or ""
            local http_referer = ngx.var.http_referer or ""
            local sent_http_set_cookie = ngx.var.sent_http_set_cookie or ""
            local request_body = ngx.var.request_body or ""
            local data = ngx.req.get_body_data() or ""    -- 요청 본문 데이터를 가져옴
            -- if not data then
            --     ngx.log(ngx.WARN, "Failed to read request body.")
            --     data = "" -- 빈 문자열로 기본값 설정
            -- end
            local cookies = ngx.var.http_cookie or ""    -- 요청의 쿠키 정보를 가져옴
            local url = ngx.var.request_uri or ""        -- Get the URL of the request
            local user_agent = ngx.var.http_user_agent or ""-- Get the User-Agent from the request header 
            local body =  { url, user_agent, cookies, data }         -- 쿠기, body 데이터를 추가로
            setmetatable(body, cjson.array_mt)      -- lua에서 메타테이블을 설정하는 작업
                                                    -- cjson.array_mt Lua 테이블을 json 배열처럼 다루기 위한 메타 테이블


            local db, err = mysql.connect()         -- db 연결

            if not db then
                ngx.log(ngx.ERR, "Error connecting to MySQL: ", err)
                return ngx.exit(500)
            end


            -- https://github.com/paragasu/lua-resty-aws-auth
            -- AWS 인증 정보 설정
            local config = {
                aws_host = "runtime.sagemaker.ap-northeast-2.amazonaws.com",
                aws_key = "AKIA5L5F4ZVAQ2UDAX55",
                aws_secret = "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",
                aws_region = "ap-northeast-2", -- 원하는 AWS 리전으로 변경
                aws_service = "sagemaker", -- 요청하는 AWS 서비스에 따라 변경
                content_type = "application/json",
                request_method = "POST",
                request_path ="/endpoints/Custom-sklearn-model-2023-10-16-19-03-04/invocations",
                request_body= cjson.encode(body)
            }

            local aws = aws_auth:new(config)    -- 인증 객체 생성
            local auth = aws:get_authorization_header()            -- AWS 인증 헤더 가져오기
            local amz_date = aws:get_date_header()             -- x-amz-date 헤더 가져오기

            -- AWS 요청 설정 생성
            local endpoint_url = "https://" .. config.aws_host .. config.request_path

            -- 요청 보내기
            local httpc = http.new()
            local res, err = httpc:request_uri(endpoint_url, {
                method = config.request_method,
                body = config.request_body,
                headers = {
                    ["Content-Type"] = config.content_type,
                    ["Authorization"] = auth, -- AWS 인증 헤더
                    ["X-Amz-Date"] = amz_date,
                },
                ssl_verify = false -- ssl 검증 비활성화
            })


            -- 응답이 제대로 왔는지 처리하는 코드
            if res.status ~= 200 then  -- 응답 상태 코드가 200이 아닌 경우.
                ngx.status = res.status  -- 응답 상태 코드를 ML API 응답과 일치하도록 설정합니다.
                ngx.log(ngx.NOTICE, "ML API call error:", res.reason)  -- 오류를 기록합니다.
                ngx.say("오류: " .. res.reason)  -- 오류 메시지를 응답합니다.
            end

            ngx.log(ngx.NOTICE, "ML API call success. continue to upstream")  -- 성공 메시지를 기록합니다.


            -- Response process log
            local response_body = cjson.decode(res.body)        -- res.body decode

            -- Log the decoded 예측된 결과를 error.log에 [notice]로 기록 남김
            ngx.log(ngx.NOTICE, "Decoded Response Body:", cjson.encode(response_body))

            local filtered_array = {unpack(response_body)}
            
            for i = #filtered_array, 1, -1 do
                if filtered_array[i] == "valid" then
                    table.remove(filtered_array, i)
                end
            end


            -- filtered_array 자료형 table -> 문자열로 변환해서 저장
            local ml_prediction = table.concat(filtered_array, ",")


            if #(filtered_array) == 0 then
                -- Its a normal request
                ngx.log(ngx.NOTICE, "This is a normal request")
                -- Add your code to handle the normal request here
            else
                -- Its an attack request
                local success, err_msg = mysql.insert(db, remote_addr, time_local, request_method, server_protocol, http_referer, url, user_agent, request_body, cookies, sent_http_set_cookie, ml_prediction)
                

                if not success then
                    ngx.log(ngx.ERR, "Error inserting into MySQL: ", err_msg)
                    return ngx.exit(500)
                end
                -- ngx.status = 403
                ngx.log(ngx.WARN, "This is an attack request")
                --ngx.say("Forbidden: This request is considered an attack.")
            end

        }
        proxy_pass http://$host_web;  # 요청을 이전에 정의한 'host_web'로 프록시합니다.
    }

    # 특정 HTTP 오류 코드에 대한 사용자 정의 오류 페이지를 정의합니다.
    error_page   500 502 503 504  /50x.html;  # 이러한 오류에 대한 사용자 정의 오류 페이지로 리다이렉트합니다.
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;  # 사용자 정의 오류 페이지의 루트를 설정합니다.
    }
}